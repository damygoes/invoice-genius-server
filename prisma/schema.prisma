generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_DATABASE_URL")
  directUrl = env("SUPABASE_DIRECT_URL")
}

model User {
  id                  String                 @id @default(cuid())
  firstName           String
  lastName            String
  username            String?
  email               String                 @unique
  phone               String?
  mobile              String?
  profilePicture      String?
  userType            UserType               @default(private)
  selectedServices    Services[]
  onboarded           Boolean                @default(false)
  createdAt           DateTime               @db.Timestamptz(6)
  updatedAt           DateTime               @updatedAt @db.Timestamptz(6)
  address             Json
  businessUserProfile BusinessUserProfile?
  ProfilePicture      ProfilePicture?
  refreshTokens       RefreshToken[]
  SavedClient         SavedClient[]
  subscriptions       SubscriptionsService[]
  invoices            UserInvoices[]
  receiptImages       UserReceiptImage[]
  savedClients        UserSavedClient[]
}

model BusinessUserProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  businessName    String
  businessLogo    String?
  businessWebsite String?
  businessInfo    String?
  businessEmail   String
  businessPhone   String?
  businessMobile  String?
  industry        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  businessAddress Json
  bankName        String?
  bic             String?
  iban            String?
  payPalEmail     String?
  user            User     @relation(fields: [userId], references: [id])
}

model SubscriptionsService {
  id                   String             @id @default(cuid())
  userId               String
  subscriptionName     String
  subscriptionCategory String
  recurringInterval    RecurringInterval?
  subscribedOn         DateTime
  expiresOn            DateTime
  setReminder          Boolean            @default(false)
  reminderPeriod       DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  user                 User               @relation(fields: [userId], references: [id])

  @@index([userId])
}

model OTPStore {
  id            String    @id @default(cuid())
  email         String    @unique
  otp           String?
  createdAt     DateTime  @default(now())
  otpExpiration DateTime?
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email])
}

model ProfilePicture {
  id        String   @id @default(cuid())
  userId    String   @unique
  picture   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model UserReceiptImage {
  id        String   @id @default(cuid())
  userId    String
  receiptId String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model InvoiceImage {
  id        String   @id @default(cuid())
  invoiceId String
  image     String
  invoice   Invoices @relation(fields: [invoiceId], references: [id])
}

model SavedClient {
  id        String            @id @default(cuid())
  firstName String
  lastName  String
  email     String            @unique
  address   Json
  phone     String?
  mobile    String?
  belongsTo String
  createdAt DateTime          @db.Timestamptz(6)
  updatedAt DateTime          @updatedAt @db.Timestamptz(6)
  invoices  Invoices[]
  user      User              @relation(fields: [belongsTo], references: [id])
  users     UserSavedClient[]
}

model Invoices {
  id            String         @id @default(cuid())
  clientId      String
  invoiceDate   DateTime
  dueDate       DateTime
  amount        Float
  vat           Float
  subTotal      Float
  status        String
  invoiceItems  Json[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  invoiceNumber String
  images        InvoiceImage[]
  client        SavedClient    @relation(fields: [clientId], references: [id])
  users         UserInvoices[]
}

model UserSavedClient {
  userId      String
  clientId    String
  savedClient SavedClient @relation(fields: [clientId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@id([userId, clientId])
}

model UserInvoices {
  userId    String
  invoiceId String
  invoice   Invoices @relation(fields: [invoiceId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, invoiceId])
}

enum UserType {
  private
  business
}

enum Services {
  receiptManagement
  subscriptionManagement
  invoicing
}

enum RecurringInterval {
  monthly
  quarterly
  yearly
}
